/// <reference path="./online-streaming-provider.d.ts" />
/// <reference path="./doc.d.ts" />
/// <reference path="./crypto.d.ts" />

class Provider {
    api = "https://www.animeunity.so";

    getSettings() {
        return {
            episodeServers: ["AnimeUnity"],
            supportsDub: false,
        };
    }

    async search(query) {
        const request = await fetch(`${this.api}/archivio?title=${encodeURIComponent(query)}`);
        if (!request.ok) {
            return [];
        }
        const data = await request.text();
        const results = [];
        
        const $ = LoadDoc(data);
        $(".archive-card").each((_, el) => {
            const title = $(el).find(".title").text().trim();
            const id = $(el).find("a").attr("href");
            if (!id) return;

            results.push({
                id: id,
                title: title,
                url: `${this.api}${id}`,
                subOrDub: "sub",
            });
        });
        return results;
    }

    async findEpisodes(id) {
        const request = await fetch(`${this.api}${id}`);
        if (!request.ok) return [];
        const data = await request.text();
        const $ = LoadDoc(data);
        const episodes = [];
        
        $(".episode-list a").each((_, el) => {
            episodes.push({
                id: $(el).attr("href") ?? "",
                url: `${this.api}${$(el).attr("href")}`,
                number: parseFloat($(el).text().trim()),
                title: `Episode ${$(el).text().trim()}`,
            });
        });
        return episodes.reverse();
    }

    async findEpisodeServer(episode, _server) {
        let server = "AnimeUnity";
        if (_server !== "default") server = _server;
        
        const episodeServer = {
            server: server,
            headers: {},
            videoSources: [],
        };
        
        const request = await fetch(`${this.api}${episode.id}`);
        if (!request.ok) return episodeServer;
        const data = await request.text();
        const $ = LoadDoc(data);
        
        const videoUrl = $("iframe").attr("src");
        if (videoUrl) {
            episodeServer.videoSources.push({
                url: videoUrl,
                type: "mp4",
                quality: "720p",
                subtitles: [],
            });
        }
        return episodeServer;
    }
}
