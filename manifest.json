{
  "id": "animesaturn",
  "name": "AnimeSaturn",
  "description": "AnimeSaturn Ã¨ un provider di streaming online per anime sottotitolati e doppiati in italiano",
  "manifestURI": "https://raw.githubusercontent.com/RubRix22/anisaturn-extention-for-seanime/refs/heads/main/manifest.json",
  "version": "1.0.0",
  "author": "RubRix22",
  "type": "onlinestream-provider",
  "language": "typescript",
  "lang": "it",
  "payload": "/// <reference path=\"./online-streaming-provider.d.ts\" />\n/// <reference path=\"./doc.d.ts\"/>\n\nclass Provider {\n  api = \"https://animesaturn.to\";\n  getSettings(): Settings {\n    return {\n      episodeServers: [\"Server 1\", \"Server 2\"],\n      supportsDub: true\n    };\n  }\n\n  async search(query: SearchOptions): Promise<SearchResult[]> {\n    let normalizedQuery = this.normalizeQuery(query[\"query\"]);\n    console.log(\"Normalized Query: \" + normalizedQuery);\n\n    const url = `${this.api}/browser?keyword=${encodeURIComponent(normalizedQuery)}`;\n\n    try {\n      const data = await this._makeRequest(url);\n      const $ = LoadDoc(data);\n      const animes: SearchResult[] = [];\n\n      $(\"div.aitem-wrapper>div.aitem\").each((_, elem) => {\n        const id = elem.find(\"a.poster\").attr(\"href\")?.slice(1) ?? \"\";\n        const title = elem.find(\"a.title\").attr(\"title\") ?? \"\";\n        const subOrDub: SubOrDub = this.isSubOrDubOrBoth(elem);\n        const url = `${this.api}/${id.slice(1)}`;\n\n        const anime: SearchResult = {\n          id: `${id}?dub=${query['dub']}`,\n          url: url,\n          title: title,\n          subOrDub: subOrDub\n        };\n\n        animes.push(anime);\n      });\n\n      return animes;\n    } catch (ex: any) {\n      throw new Error(ex);\n    }\n  }\n}"\n}
